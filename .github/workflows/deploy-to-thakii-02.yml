name: Deploy Thakii Worker Service to Thakii-02

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  PYTHON_VERSION: '3.12'
  PROJECT_NAME: 'thakii-worker-service'
  DEPLOY_PATH: '/home/ec2-user/thakii-worker-service'
  SERVICE_NAME: 'thakii-worker-service'
  PDF_ENGINE_PATH: '/home/ec2-user/thakii-pdf-engine'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        
    - name: Install dependencies
      run: |
        source venv/bin/activate
        pip install -r requirements.txt
        
    - name: Test basic imports
      run: |
        source venv/bin/activate
        python -c "
        try:
            import boto3
            import firebase_admin
            print('✅ Core dependencies imported successfully')
        except ImportError as e:
            print(f'❌ Import failed: {e}')
            exit(1)
        "
        
    - name: Test worker module structure
      run: |
        source venv/bin/activate
        python -c "
        import os
        import sys
        
        # Check if worker.py exists
        if os.path.exists('worker.py'):
            print('✅ worker.py found')
        else:
            print('❌ worker.py not found')
            exit(1)
            
        # Check if core modules exist
        if os.path.exists('core'):
            print('✅ core directory found')
        else:
            print('❌ core directory not found')
            exit(1)
        "
        
  deploy:
    needs: test
    runs-on: ubuntu-latest
    name: Deploy to Thakii-02
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H thakii-02.fds-1.com >> ~/.ssh/known_hosts || true
        
    - name: Install Cloudflared
      run: |
        # Download and install cloudflared
        wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
        sudo dpkg -i cloudflared-linux-amd64.deb || sudo apt-get install -f -y
        
    - name: Setup Cloudflare Access
      run: |
        # Setup cloudflared with service token
        echo "${{ secrets.CLOUDFLARE_SERVICE_TOKEN }}" | cloudflared access login --service-token-stdin || true
        
    - name: Test SSH Connection
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o ConnectTimeout=30 \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "echo 'SSH connection successful' && whoami"
            
    - name: Create deployment directory
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "mkdir -p ${{ env.DEPLOY_PATH }}"
            
    - name: Stop existing worker service (if running)
      continue-on-error: true
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "sudo systemctl stop ${{ env.SERVICE_NAME }} || true; pkill -f 'python.*worker.py' || true; echo 'Service stop completed'"
    - name: Backup current deployment
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "if [ -d ${{ env.DEPLOY_PATH }} ]; then 
               sudo cp -r ${{ env.DEPLOY_PATH }} ${{ env.DEPLOY_PATH }}.backup.$(date +%Y%m%d_%H%M%S) || true
             fi"
             
    - name: Deploy application files
      run: |
        # Create a tarball of the application (exclude problematic files)
        tar -czf thakii-worker-service.tar.gz \
          --exclude='.git' \
          --exclude='venv' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='*.tar.gz' \
          --exclude='*.log' \
          --exclude='temp_*' \
          . 2>/dev/null || tar -czf thakii-worker-service.tar.gz \
          --exclude='.git' \
          --exclude='venv' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='*.tar.gz' \
          --exclude='*.log' \
          --exclude='temp_*' \
          .
          
        # Copy to server
        scp -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            thakii-worker-service.tar.gz \
            ec2-user@thakii-02.fds-1.com:/tmp/
            
        # Extract on server
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "cd /home/ec2-user && 
             rm -rf thakii-worker-service-new &&
             mkdir -p thakii-worker-service-new &&
             cd thakii-worker-service-new &&
             tar -xzf /tmp/thakii-worker-service.tar.gz &&
             rm /tmp/thakii-worker-service.tar.gz &&
             cd .. &&
             rm -rf thakii-worker-service-old &&
             mv thakii-worker-service thakii-worker-service-old || true &&
             mv thakii-worker-service-new thakii-worker-service"
             
    - name: Setup Python environment on server
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "cd ${{ env.DEPLOY_PATH }} &&
             python3 -m venv venv &&
             source venv/bin/activate &&
             pip install --upgrade pip &&
             pip install -r requirements.txt &&
             echo 'Python environment setup complete'"
             
    - name: Install system dependencies
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "sudo apt-get update -qq &&
             sudo apt-get install -y python3-opencv libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1 ffmpeg portaudio19-dev || true"
             
    - name: Verify PDF Engine dependency
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "if [ -d ${{ env.PDF_ENGINE_PATH }} ]; then
               echo '✅ PDF Engine found at ${{ env.PDF_ENGINE_PATH }}'
               ls -la ${{ env.PDF_ENGINE_PATH }}/src/
             else
               echo '❌ PDF Engine not found at ${{ env.PDF_ENGINE_PATH }}'
               echo 'Please deploy thakii-pdf-engine first'
               exit 1
             fi"
             
    - name: Test deployment
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "cd ${{ env.DEPLOY_PATH }} &&
             source venv/bin/activate &&
             python -c 'import worker; print(\"✅ Worker module imported successfully\")' ||
             python -c 'import sys; sys.path.append(\".\"); import worker; print(\"✅ Worker module imported successfully\")'"
             
    - name: Create systemd service file
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "cat > /tmp/thakii-worker-service.service << 'EOF' && sudo mv /tmp/thakii-worker-service.service /etc/systemd/system/${{ env.SERVICE_NAME }}.service
        [Unit]
        Description=Thakii Worker Service - Video Processing Pipeline
        After=network.target
        Wants=network-online.target
        
        [Service]
        Type=simple
        User=ec2-user
        Group=ec2-user
        WorkingDirectory=${{ env.DEPLOY_PATH }}
        Environment=PATH=${{ env.DEPLOY_PATH }}/venv/bin
        Environment=PYTHONPATH=${{ env.DEPLOY_PATH }}:${{ env.DEPLOY_PATH }}/core
        Environment=LECTURE2PDF_PATH=${{ env.PDF_ENGINE_PATH }}
        Environment=S3_BUCKET_NAME=thakii-video-storage-1753883631
        Environment=AWS_DEFAULT_REGION=us-east-2
        Environment=DISABLE_FIREBASE=true
        Environment=WORKER_POLL_INTERVAL=5
        Environment=MAX_CONCURRENT_TASKS=2
        ExecStart=${{ env.DEPLOY_PATH }}/venv/bin/python worker.py
        Restart=always
        RestartSec=10
        StandardOutput=journal
        StandardError=journal
        SyslogIdentifier=${{ env.SERVICE_NAME }}
        KillMode=mixed
        KillSignal=SIGTERM
        TimeoutStopSec=30
        
        [Install]
        WantedBy=multi-user.target
        EOF"
        
    - name: Enable and start service
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "sudo systemctl daemon-reload &&
             sudo systemctl enable ${{ env.SERVICE_NAME }} &&
             sudo systemctl start ${{ env.SERVICE_NAME }} &&
             echo 'Service started successfully'"
             
    - name: Create deployment info
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "cd ${{ env.DEPLOY_PATH }} &&
             echo 'Deployment Info:' > deployment_info.txt &&
             echo 'Date: $(date)' >> deployment_info.txt &&
             echo 'Commit: ${{ github.sha }}' >> deployment_info.txt &&
             echo 'Branch: ${{ github.ref_name }}' >> deployment_info.txt &&
             echo 'Deployed by: ${{ github.actor }}' >> deployment_info.txt &&
             echo 'PDF Engine Path: ${{ env.PDF_ENGINE_PATH }}' >> deployment_info.txt &&
             cat deployment_info.txt"
             
    - name: Verify deployment and service status
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "cd ${{ env.DEPLOY_PATH }} &&
             echo '📊 Service Status:' &&
             sudo systemctl is-active ${{ env.SERVICE_NAME }} && echo 'Service is running' || echo 'Service is not running' &&
             echo '' &&
             echo '📋 Recent Service Logs:' &&
             sudo journalctl -u ${{ env.SERVICE_NAME }} --no-pager -n 10 || echo 'No logs available' &&
             echo '' &&
             echo '🔍 Process Status:' &&
             ps aux | grep -E 'python.*worker' | grep -v grep || echo 'No worker processes found' &&
             echo '' &&
             echo '✅ Deployment verification completed!'"
             
    - name: Health Check - Worker Service
      run: |
        echo "🏥 Starting Worker Service Health Checks..."
        echo ""
        
        # Wait for service to fully start
        echo "⏳ Waiting for worker service to initialize..."
        sleep 20
        
        # Check service status
        echo "🔍 Checking service status..."
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "sudo systemctl status ${{ env.SERVICE_NAME }} --no-pager -l || echo 'Service status check failed'"
        
        echo ""
        echo "📊 Worker Service Information:"
        echo "Service name: ${{ env.SERVICE_NAME }}"
        echo "Deploy path: ${{ env.DEPLOY_PATH }}"
        echo "PDF Engine path: ${{ env.PDF_ENGINE_PATH }}"
        echo "Environment: Production"
        
        # Check if worker is polling for tasks
        echo ""
        echo "🔍 Worker Activity Check:"
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "sudo journalctl -u ${{ env.SERVICE_NAME }} --since '1 minute ago' --no-pager | tail -5 || echo 'No recent activity logs'"
        
        # Check dependencies
        echo ""
        echo "🔧 Dependency Check:"
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "cd ${{ env.DEPLOY_PATH }} &&
             source venv/bin/activate &&
             python -c 'import boto3, firebase_admin; print(\"✅ AWS and Firebase dependencies available\")' &&
             ls -la ${{ env.PDF_ENGINE_PATH }}/src/main.py && echo '✅ PDF Engine accessible' || echo '❌ PDF Engine not accessible'"
        
        echo ""
        echo "✅ Worker service health checks completed!"

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    name: Notify Deployment Status
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "🎉 Worker Service deployment to thakii-02.fds-1.com completed successfully!"
        echo "Service: ${{ env.SERVICE_NAME }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Deployed by: ${{ github.actor }}"
        echo ""
        echo "🔄 The worker service is now monitoring Firestore for video processing tasks"
        echo "📍 Service logs: sudo journalctl -u ${{ env.SERVICE_NAME }} -f"
        
    - name: Notify Failure
      if: needs.deploy.result == 'failure' || needs.test.result == 'failure'
      run: |
        echo "❌ Worker Service deployment failed!"
        echo "Please check the logs for details."
        echo "Common issues:"
        echo "  - PDF Engine not deployed first"
        echo "  - Missing SSH or Cloudflare secrets"
        echo "  - Dependencies installation failed"
        exit 1
