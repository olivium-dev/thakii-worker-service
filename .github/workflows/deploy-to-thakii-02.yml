name: Deploy Thakii Worker Service to Thakii-02

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  PYTHON_VERSION: '3.12'
  PROJECT_NAME: 'thakii-worker-service'
  DEPLOY_PATH: '/home/ec2-user/thakii-worker-service'
  SERVICE_NAME: 'thakii-worker-service'
  PDF_ENGINE_PATH: '/home/ec2-user/thakii-pdf-engine'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        
    - name: Install dependencies
      run: |
        source venv/bin/activate
        pip install -r requirements.txt
        
    - name: Test basic imports
      run: |
        source venv/bin/activate
        python -c "
        try:
            import boto3
            import firebase_admin
            print('✅ Core dependencies imported successfully')
        except ImportError as e:
            print(f'❌ Import failed: {e}')
            exit(1)
        "
        
    - name: Test worker module structure
      run: |
        source venv/bin/activate
        python -c "
        import os
        import sys
        
        # Check if worker.py exists
        if os.path.exists('worker.py'):
            print('✅ worker.py found')
        else:
            print('❌ worker.py not found')
            exit(1)
            
        # Check if core modules exist
        if os.path.exists('core'):
            print('✅ core directory found')
        else:
            print('❌ core directory not found')
            exit(1)
        "
        
  deploy:
    needs: test
    runs-on: ubuntu-latest
    name: Deploy to Thakii-02
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H thakii-02.fds-1.com >> ~/.ssh/known_hosts || true
        
    - name: Install Cloudflared
      run: |
        # Download and install cloudflared
        wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
        sudo dpkg -i cloudflared-linux-amd64.deb || sudo apt-get install -f -y
        
    - name: Setup Cloudflare Access
      run: |
        # Setup cloudflared with service token
        echo "${{ secrets.CLOUDFLARE_SERVICE_TOKEN }}" | cloudflared access login --service-token-stdin || true
        
    - name: Test SSH Connection
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o ConnectTimeout=30 \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "echo 'SSH connection successful' && whoami"
            
    - name: Create deployment directory
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "mkdir -p ${{ env.DEPLOY_PATH }}"
            
    - name: Stop existing service (if running)
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "sudo systemctl stop ${{ env.SERVICE_NAME }} || echo 'Service not running'"
            
    - name: Backup current deployment
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "if [ -d ${{ env.DEPLOY_PATH }} ]; then 
               sudo cp -r ${{ env.DEPLOY_PATH }} ${{ env.DEPLOY_PATH }}.backup.$(date +%Y%m%d_%H%M%S) || true
             fi"
             
    - name: Deploy application files
      run: |
        # Clean up disk space first
        rm -f cloudflared-linux-amd64.deb || true
        df -h .
        
        # Create a tarball of the application (exclude problematic files)
        tar -czf thakii-worker-service.tar.gz \
          --exclude='.git' \
          --exclude='venv' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='*.tar.gz' \
          --exclude='*.log' \
          --exclude='temp_*' \
          --exclude='cloudflared*' \
          --exclude='*.deb' \
          . 2>/dev/null || tar -czf thakii-worker-service.tar.gz \
          --exclude='.git' \
          --exclude='venv' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='*.tar.gz' \
          --exclude='*.log' \
          --exclude='temp_*' \
          --exclude='cloudflared*' \
          --exclude='*.deb' \
          .
          
        # Copy to server
        scp -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            thakii-worker-service.tar.gz \
            ec2-user@thakii-02.fds-1.com:/tmp/
            
        # Extract on server
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "cd /home/ec2-user && 
             rm -rf thakii-worker-service-new &&
             mkdir -p thakii-worker-service-new &&
             cd thakii-worker-service-new &&
             tar -xzf /tmp/thakii-worker-service.tar.gz &&
             rm /tmp/thakii-worker-service.tar.gz &&
             cd .. &&
             rm -rf thakii-worker-service-old &&
             mv thakii-worker-service thakii-worker-service-old || true &&
             mv thakii-worker-service-new thakii-worker-service"
             
    - name: Setup Python environment on server
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "cd ${{ env.DEPLOY_PATH }} &&
             python3 -m venv venv &&
             source venv/bin/activate &&
             pip install --upgrade pip &&
             pip install -r requirements.txt &&
             echo 'Python environment setup complete'"
             
    - name: Install system dependencies
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "sudo apt-get update -qq &&
             sudo apt-get install -y python3-opencv libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1 || true"
             
    - name: Verify PDF Engine dependency
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "echo '🔍 Checking PDF Engine dependency...' &&
             ls -la ${{ env.PDF_ENGINE_PATH }}/src/ | head -10 &&
             echo '✅ PDF Engine is available at ${{ env.PDF_ENGINE_PATH }}'"
             
    - name: Test deployment
      continue-on-error: true
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "cd ${{ env.DEPLOY_PATH }} &&
             source venv/bin/activate &&
             export DISABLE_FIREBASE=true &&
             export AWS_DEFAULT_REGION=us-east-1 &&
             export LECTURE2PDF_PATH=${{ env.PDF_ENGINE_PATH }} &&
             python -c 'import core.s3_storage; import core.firestore_db; print(\"✅ Core modules imported successfully\")' ||
             echo '⚠️ Module import test failed, but continuing with deployment'"
             
    - name: Create systemd service file
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "cat > /tmp/thakii-worker-service.service << 'EOF' && sudo mv /tmp/thakii-worker-service.service /etc/systemd/system/${{ env.SERVICE_NAME }}.service
        [Unit]
        Description=Thakii Worker Service
        After=network.target
        
        [Service]
        Type=simple
        User=ec2-user
        Group=ec2-user
        WorkingDirectory=${{ env.DEPLOY_PATH }}
        Environment=PATH=${{ env.DEPLOY_PATH }}/venv/bin
        Environment=LECTURE2PDF_PATH=${{ env.PDF_ENGINE_PATH }}
        Environment=DISABLE_FIREBASE=true
        ExecStart=${{ env.DEPLOY_PATH }}/venv/bin/python worker.py
        Restart=always
        RestartSec=10
        StandardOutput=journal
        StandardError=journal
        SyslogIdentifier=${{ env.SERVICE_NAME }}
        
        [Install]
        WantedBy=multi-user.target
        EOF"
        
    - name: Enable and start service
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "sudo systemctl daemon-reload &&
             sudo systemctl enable ${{ env.SERVICE_NAME }} &&
             sudo systemctl start ${{ env.SERVICE_NAME }} &&
             echo 'Service started successfully'"
             
    - name: Create deployment info
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "cd ${{ env.DEPLOY_PATH }} &&
             echo 'Deployment Info:' > deployment_info.txt &&
             echo 'Date: $(date)' >> deployment_info.txt &&
             echo 'Commit: ${{ github.sha }}' >> deployment_info.txt &&
             echo 'Branch: ${{ github.ref_name }}' >> deployment_info.txt &&
             echo 'Deployed by: ${{ github.actor }}' >> deployment_info.txt &&
             cat deployment_info.txt"
             
    - name: Verify deployment and service status
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "cd ${{ env.DEPLOY_PATH }} &&
             source venv/bin/activate &&
             python -c 'print(\"✅ Deployment verification successful\")' &&
             ls -la &&
             echo '✅ Deployment completed successfully!' &&
             echo '' &&
             echo '📊 Service Status:' &&
             sudo systemctl is-active ${{ env.SERVICE_NAME }} && echo 'Service is running' || echo 'Service is not running'"
             
    - name: Health Check - Worker Service
      run: |
        echo "🏥 Starting Worker Service Health Checks..."
        echo ""
        
        # Wait for service to start
        echo "⏳ Waiting for worker service to start..."
        sleep 15
        
        # Check service status
        echo "📊 Service Status:"
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "sudo systemctl is-active ${{ env.SERVICE_NAME }} && echo 'Service is running' || echo 'Service is not running'"
        
        # Check service logs
        echo ""
        echo "📋 Recent Service Logs:"
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "sudo journalctl -u ${{ env.SERVICE_NAME }} --no-pager -n 10 || echo 'No logs available'"
        
        # Check worker processes
        echo ""
        echo "🔍 Worker Processes:"
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "ps aux | grep 'python.*worker.py' | grep -v grep || echo 'No worker processes found'"
        
        echo ""
        echo "✅ Worker service health checks completed!"

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    name: Notify Deployment Status
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "🎉 Worker Service deployment to thakii-02.fds-1.com completed successfully!"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Deployed by: ${{ github.actor }}"
        echo "PDF Engine Path: /home/ec2-user/thakii-pdf-engine"
        echo "Worker Service Path: /home/ec2-user/thakii-worker-service"
        
    - name: Notify Failure
      if: needs.deploy.result == 'failure' || needs.test.result == 'failure'
      run: |
        echo "❌ Worker Service deployment failed!"
        echo "Please check the logs for details."
        echo "Common issues:"
        echo "  - PDF Engine not deployed first"
        echo "  - Missing SSH or Cloudflare secrets"
        echo "  - Dependencies installation failed"
        exit 1
