name: 🔧 Fix Cloudflare DNS for Worker Service

on:
  workflow_dispatch:
    inputs:
      server_ip:
        description: 'Server IP address'
        required: true
        default: '81.204.248.240'
        type: string

jobs:
  fix-dns:
    name: 🌐 Configure Cloudflare DNS
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: 🔧 Fix Cloudflare DNS Configuration
      env:
        CLOUDFLARE_SERVICE_TOKEN: ${{ secrets.CLOUDFLARE_SERVICE_TOKEN }}
        SERVER_IP: ${{ github.event.inputs.server_ip }}
      run: |
        python3 -c "
        import requests
        import json
        import os

        # Configuration
        domain = 'fanusdigital.site'
        subdomain = 'thakii-02'
        server_ip = os.getenv('SERVER_IP', '81.204.248.240')
        full_domain = f'{subdomain}.{domain}'
        api_token = os.getenv('CLOUDFLARE_SERVICE_TOKEN')

        print(f'🚀 === FIXING CLOUDFLARE DNS FOR {full_domain} ===')
        print(f'🎯 Target IP: {server_ip}')
        print()

        headers = {
            'Authorization': f'Bearer {api_token}',
            'Content-Type': 'application/json'
        }

        # Step 1: Get Zone ID
        print('1️⃣ Getting Zone ID...')
        zones_url = f'https://api.cloudflare.com/client/v4/zones?name={domain}'
        response = requests.get(zones_url, headers=headers)
        zones_data = response.json()

        if not zones_data['success']:
            print(f'❌ Error: {zones_data[\"errors\"]}')
            exit(1)

        zone_id = zones_data['result'][0]['id']
        print(f'✅ Zone ID: {zone_id}')

        # Step 2: Check existing records
        print('2️⃣ Checking existing DNS records...')
        dns_url = f'https://api.cloudflare.com/client/v4/zones/{zone_id}/dns_records?name={full_domain}'
        response = requests.get(dns_url, headers=headers)
        dns_data = response.json()

        existing_a_record = None
        for record in dns_data['result']:
            if record['type'] == 'A':
                existing_a_record = record
                break

        # Step 3: Update or create A record
        if existing_a_record:
            print(f'3️⃣ Updating existing A record...')
            print(f'   Current: {existing_a_record[\"content\"]} (Proxied: {existing_a_record[\"proxied\"]})')
            
            record_id = existing_a_record['id']
            update_url = f'https://api.cloudflare.com/client/v4/zones/{zone_id}/dns_records/{record_id}'
            
            data = {
                'type': 'A',
                'name': subdomain,
                'content': server_ip,
                'proxied': True,
                'comment': f'Updated by GitHub Actions - Thakii Worker Service'
            }
            
            response = requests.put(update_url, headers=headers, json=data)
        else:
            print(f'3️⃣ Creating new A record...')
            
            create_url = f'https://api.cloudflare.com/client/v4/zones/{zone_id}/dns_records'
            
            data = {
                'type': 'A',
                'name': subdomain,
                'content': server_ip,
                'proxied': True,
                'comment': f'Created by GitHub Actions - Thakii Worker Service'
            }
            
            response = requests.post(create_url, headers=headers, json=data)

        result = response.json()
        if result['success']:
            print(f'✅ DNS record configured successfully!')
            print(f'   {full_domain} → {server_ip} (Proxied: ON)')
        else:
            print(f'❌ Error: {result[\"errors\"]}')
            exit(1)

        print()
        print('🎉 === CLOUDFLARE DNS CONFIGURATION COMPLETE ===')
        print(f'🌐 Test your API at: https://{full_domain}/worker/health')
        print('⏳ DNS propagation: 1-5 minutes')
        "

    - name: 🧪 Test API Access
      run: |
        echo "🧪 Testing API access after DNS fix..."
        sleep 30
        
        echo "Testing health endpoint:"
        curl -s -w "Status: %{http_code} | Time: %{time_total}s\n" https://thakii-02.fanusdigital.site/worker/health || echo "Still propagating..."
        
        echo "Testing list endpoint:"
        curl -s -w "Status: %{http_code} | Time: %{time_total}s\n" https://thakii-02.fanusdigital.site/worker/list || echo "Still propagating..."

    - name: 📊 Summary
      if: always()
      run: |
        echo "## 🔧 Cloudflare DNS Fix Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| DNS Record | ✅ Updated |" >> $GITHUB_STEP_SUMMARY
        echo "| Proxy Status | ✅ Enabled |" >> $GITHUB_STEP_SUMMARY
        echo "| Target IP | 81.204.248.240 |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🌐 **API Endpoint**: https://thakii-02.fanusdigital.site/worker/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "⏳ **Note**: DNS propagation may take 1-5 minutes" >> $GITHUB_STEP_SUMMARY
